// Generated by CoffeeScript 1.3.3
var ContentPlugin, Page, async, extend, path, rfc822, stripExtension, underscore, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

async = require('async');

underscore = require('underscore');

ContentPlugin = require('./../content').ContentPlugin;

_ref = require('./../common'), stripExtension = _ref.stripExtension, extend = _ref.extend, rfc822 = _ref.rfc822;

Page = (function(_super) {

  __extends(Page, _super);

  /* page content plugin, a page is a file that has
      metadata, html and a template that renders it
  */


  function Page(_filename, _content, _metadata) {
    this._filename = _filename;
    this._content = _content;
    this._metadata = _metadata;
  }

  Page.prototype.getFilename = function() {
    return this._metadata.filename || stripExtension(this._filename) + '.html';
  };

  Page.prototype.getHtml = function(base) {
    if (base == null) {
      base = '/';
    }
    return this._content;
  };

  Page.prototype.getUrl = function(base) {
    return Page.__super__.getUrl.call(this, base).replace(/index\.html$/, '');
  };

  Page.prototype.render = function(locals, contents, templates, callback) {
    var _this = this;
    if (this.template === 'none') {
      return callback(null, null);
    }
    return async.waterfall([
      function(callback) {
        var template;
        template = templates[_this.template];
        if (!(template != null)) {
          return callback(new Error("page '" + _this.filename + "' specifies unknown template '" + _this.template + "'"));
        } else {
          return callback(null, template);
        }
      }, function(template, callback) {
        var ctx;
        ctx = {
          page: _this,
          contents: contents,
          _: underscore
        };
        extend(ctx, locals);
        return template.render(ctx, callback);
      }
    ], callback);
  };

  Page.property('metadata', function() {
    return this._metadata;
  });

  Page.property('template', function() {
    return this._metadata.template || 'none';
  });

  Page.property('html', function() {
    return this.getHtml();
  });

  Page.property('title', function() {
    return this._metadata.title || 'Untitled';
  });

  Page.property('date', function() {
    return new Date(this._metadata.date || 0);
  });

  Page.property('rfc822date', function() {
    return rfc822(this.date);
  });

  Page.property('intro', function() {
    var idx;
    idx = ~this.html.indexOf('<span class="more') || ~this.html.indexOf('<h2');
    if (idx) {
      return this.html.substr(0, ~idx);
    } else {
      return this.html;
    }
  });

  Page.property('hasMore', function() {
    var _ref1;
    if ((_ref1 = this._hasMore) == null) {
      this._hasMore = this.html.length > this.intro.length;
    }
    return this._hasMore;
  });

  return Page;

})(ContentPlugin);

module.exports = Page;
