// Generated by CoffeeScript 1.3.3
var async, build, colors, commonOptions, commonUsage, extend, fs, getOptions, loadPlugins, logger, options, path, rimraf, usage, wintersmith, _ref, _ref1;

async = require('async');

rimraf = require('rimraf');

fs = require('fs');

path = require('path');

colors = require('colors');

_ref = require('../common'), logger = _ref.logger, extend = _ref.extend;

_ref1 = require('./common'), getOptions = _ref1.getOptions, commonOptions = _ref1.commonOptions, commonUsage = _ref1.commonUsage, loadPlugins = _ref1.loadPlugins;

wintersmith = require('../');

usage = "\nusage: wintersmith build [options]\n\noptions:\n\n  -o, --output [path]           directory to write build-output (defaults to ./output)\n  -X, --clean                   clean before building (warning: will recursively delete everything at output path)\n  " + commonUsage + "\n\n  all options can also be set in the config file\n\nexamples:\n\n  build using a config file (assuming config.json is found in working directory):\n  $ wintersmith build\n\n  build using command line options:\n  $ wintersmith build -o /var/www/public/ -T extra_data.json -C ~/my-blog\n\n  or using both (command-line options will override config options):\n  $ wintersmith build --config another_config.json --clean";

options = {
  output: {
    alias: 'o',
    "default": './build'
  },
  clean: {
    alias: 'X',
    "default": false
  }
};

extend(options, commonOptions);

build = function(argv) {
  var start;
  start = new Date();
  logger.info('building site');
  return async.waterfall([
    async.apply(getOptions, argv), function(options, callback) {
      return async.waterfall([
        function(callback) {
          return path.exists(options.output, function(exists) {
            if (exists) {
              return callback();
            } else {
              logger.verbose("creating output directory " + options.output);
              return fs.mkdir(options.output, callback);
            }
          });
        }, function(callback) {
          if (options.clean) {
            logger.verbose("cleaning - running rimraf on " + options.output);
            return async.waterfall([async.apply(rimraf, options.output), async.apply(fs.mkdir, options.output)], callback);
          } else {
            return callback();
          }
        }, async.apply(loadPlugins, options.plugins), function(callback) {
          return wintersmith(options, callback);
        }
      ], callback);
    }
  ], function(error) {
    var delta, stop;
    if (error) {
      return logger.error(error.message, error);
    } else {
      stop = new Date();
      delta = stop - start;
      return logger.info("done in " + (delta.toString().bold) + " ms\n");
    }
  });
};

module.exports = build;

module.exports.usage = usage;

module.exports.options = options;
