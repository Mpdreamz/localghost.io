// Generated by CoffeeScript 1.3.3
var async, createSite, fs, logger, ncp, options, path, templateTypes, usage,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

async = require('async');

ncp = require('ncp').ncp;

fs = require('fs');

path = require('path');

logger = require('../common').logger;

templateTypes = ['basic', 'blog'];

usage = "\nusage: wintersmith new [options] <path>\n\ncreates a skeleton site in <path>\n\noptions:\n\n  -f, --force             overwrite existing files\n  -T, --template <name>   template to create new site from (defaults to 'blog')\n\n  available templates are: " + (templateTypes.join(', ')) + "\n\nexample:\n\n  create a new site in your home directory\n  $ wintersmith new ~/my-blog\n";

options = {
  force: {
    alias: 'f'
  },
  template: {
    alias: 'T',
    "default": 'blog'
  }
};

createSite = function(argv) {
  /* copy example directory to *location*
  */

  var from, location, to, _ref;
  location = argv._[1];
  if (!(location != null) || !location.length) {
    logger.error('you must specify a location');
    return;
  }
  if (_ref = argv.template, __indexOf.call(templateTypes, _ref) < 0) {
    logger.error("unknown template type " + argv.template);
    return;
  }
  from = path.join(__dirname, '../../examples/' + argv.template);
  to = path.resolve(location);
  logger.info("initializing new wintersmith site in " + to + " using template " + argv.template);
  return async.waterfall([
    function(callback) {
      logger.verbose("checking validity of " + to);
      return path.exists(to, function(exists) {
        if (exists && !argv.force) {
          return callback(new Error("" + to + " already exists. Add --force to overwrite"));
        } else {
          return callback();
        }
      });
    }, function(callback) {
      logger.verbose("recursive copy " + from + " -> " + to);
      return ncp(from, to, {}, callback);
    }
  ], function(error) {
    if (error) {
      return logger.error(error.message, error);
    } else {
      return logger.info('done!');
    }
  });
};

module.exports = createSite;

module.exports.usage = usage;

module.exports.options = options;
