// Generated by CoffeeScript 1.3.3
var TemplatePlugin, async, extend, glob, loadTemplates, logger, path, registerTemplatePlugin, templatePlugins, _ref;

async = require('async');

path = require('path');

glob = require('glob');

_ref = require('./common'), logger = _ref.logger, extend = _ref.extend;

templatePlugins = [];

registerTemplatePlugin = function(pattern, plugin) {
  /* add a template *plugin*, all files in the template directory matching the
      glob *pattern* will be passed to the plugins fromFile function.
  */
  return templatePlugins.push({
    pattern: pattern,
    "class": plugin
  });
};

TemplatePlugin = (function() {

  function TemplatePlugin() {}

  TemplatePlugin.prototype.render = function(locals, callback) {
    /* render template using *locals* and *callback* with a ReadStream or
        Buffer containing the rendered contents
    */
    throw new Error('not implemented');
  };

  return TemplatePlugin;

})();

TemplatePlugin.fromFile = function(filename, base, callback) {
  /* *callback* with a instance of <TemplatePlugin> created from *filename*
  */
  throw new Error('not implemented');
};

loadTemplates = function(location, callback) {
  /* load and compile all templates found in *location*
      returns map of templates {name: <TemplatePlugin> instance}
  */

  var loadPluginTemplates, opts, rv;
  rv = {};
  opts = {
    cwd: location,
    nosort: true
  };
  loadPluginTemplates = function(plugin, callback) {
    /* scans *location* and loads any templates for *plugin* if its glob pattern matches
    */
    return async.waterfall([
      async.apply(glob, plugin.pattern, opts), function(files, callback) {
        var templates;
        templates = {};
        return async.forEach(files, function(filename, callback) {
          logger.verbose("loading template: " + filename);
          return plugin["class"].fromFile(filename, location, function(error, template) {
            templates[filename] = template;
            return callback(error);
          });
        }, function(error) {
          return callback(error, templates);
        });
      }
    ], callback);
  };
  return async.waterfall([
    async.apply(async.map, templatePlugins, loadPluginTemplates), function(result, callback) {
      var t, templates, _i, _len;
      templates = {};
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        t = result[_i];
        extend(templates, t);
      }
      return callback(null, templates);
    }
  ], callback);
};

module.exports.loadTemplates = loadTemplates;

module.exports.TemplatePlugin = TemplatePlugin;

module.exports.registerTemplatePlugin = registerTemplatePlugin;
